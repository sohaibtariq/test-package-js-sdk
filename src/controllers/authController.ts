/**
 * Intervengine Application API V1Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  ApiV1AuthTokenUpgradeRequest,
  apiV1AuthTokenUpgradeRequestSchema,
} from '../models/apiV1AuthTokenUpgradeRequest';
import {
  ApiV1AuthTokenUpgradeResponse,
  apiV1AuthTokenUpgradeResponseSchema,
} from '../models/apiV1AuthTokenUpgradeResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class AuthController extends BaseController {
  /**
   * Search tags
   *
   * @param xAPIKEY
   * @param body
   * @return Response from the API call
   */
  async httpLocalhost8080ApiV1AuthTokenUpgrade(
    xAPIKEY?: string,
    body?: ApiV1AuthTokenUpgradeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiV1AuthTokenUpgradeResponse>> {
    const req = this.createRequest('POST', '/api/v1/auth/token/upgrade');
    const mapped = req.prepareArgs({
      xAPIKEY: [xAPIKEY, optional(string())],
      body: [body, optional(apiV1AuthTokenUpgradeRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('X-API-KEY', mapped.xAPIKEY);
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad Request');
    req.throwOn(401, ApiError, 'Unauthorized');
    req.throwOn(404, ApiError, 'Not Found');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(apiV1AuthTokenUpgradeResponseSchema, requestOptions);
  }
}
