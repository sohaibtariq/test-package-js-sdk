/**
 * Intervengine Application API V1Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  ApiV1SurveysSearchRequest,
  apiV1SurveysSearchRequestSchema,
} from '../models/apiV1SurveysSearchRequest';
import { Survey, surveySchema } from '../models/survey';
import {
  SurveySearchResult,
  surveySearchResultSchema,
} from '../models/surveySearchResult';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SurveysController extends BaseController {
  /**
   * Search surveys
   *
   * @param xAPIKEY
   * @param page         current page number
   * @param perPage      a number of records per page
   * @param body
   * @return Response from the API call
   */
  async httpLocalhost8080ApiV1SurveysSearch(
    xAPIKEY?: string,
    page?: number,
    perPage?: number,
    body?: ApiV1SurveysSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SurveySearchResult>> {
    const req = this.createRequest('POST', '/api/v1/surveys/search');
    const mapped = req.prepareArgs({
      xAPIKEY: [xAPIKEY, optional(string())],
      page: [page, optional(number())],
      perPage: [perPage, optional(number())],
      body: [body, optional(apiV1SurveysSearchRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('X-API-KEY', mapped.xAPIKEY);
    req.query('page', mapped.page);
    req.query('per_page', mapped.perPage);
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad Request');
    req.throwOn(401, ApiError, 'Unauthorized');
    req.throwOn(404, ApiError, 'Not Found');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(surveySearchResultSchema, requestOptions);
  }

  /**
   * http://localhost:8080/api/v1/surveys/:id
   *
   * @param id
   * @param xAPIKEY
   * @return Response from the API call
   */
  async httpLocalhost8080ApiV1SurveysId(
    id: number,
    xAPIKEY?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Survey>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, number()],
      xAPIKEY: [xAPIKEY, optional(string())],
    });
    req.header('X-API-KEY', mapped.xAPIKEY);
    req.appendTemplatePath`/api/v1/surveys/${mapped.id}`;
    return req.callAsJson(surveySchema, requestOptions);
  }
}
